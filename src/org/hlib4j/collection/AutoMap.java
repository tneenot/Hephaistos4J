/*
 *  Hephaistos 4 Java library: a library with facilities to get more concise code.
 *
 *  Copyright (C) 2017 Tioben Neenot
 *
 *  This source is distributed under conditions defined into the LICENSE file.
 */

package org.hlib4j.collection;


import org.hlib4j.concept.KeyGenerator;
import org.hlib4j.util.States;

import java.util.Map;

/**
 * The <code>AutoMap</code> allows to record a flow of data with a map key value generated automatically. It's
 * necessary to specify a {@link KeyGenerator} to the constructor with the map to use with. This implementation
 * authorized some doubloon value for the underlying <code>Map</code>, if the {@link KeyGenerator} generated a valid
 * new key value for each record.
 *
 * @param <K> The key type to use with the <code>Map</code> and <code>KeyGenertor</code>.
 * @param <V> The value for the <code>Map</code>.
 */
public class AutoMap<K, V>
{
  private final KeyGenerator<?> keyGenerator;
  private final Map associatedMap;

  /**
   * Create an instance of <code>AutoMap</code>.
   *
   * @param keyGenerator  The <code>KeyGenerator</code> implementation for associated map value management.
   * @param associatedMap The <code>Map</code> associated with this instance.
   */
  public AutoMap(KeyGenerator<K> keyGenerator, Map<K, V> associatedMap)
  {
    this.keyGenerator = States.validate(keyGenerator);
    this.associatedMap = States.validate(associatedMap);
  }

  /**
   * Puts a value for the associated map.
   *
   * @param value Value for the associated map. The associated key will be generated by the <code>KeyGenerator</code>
   *              given to the constructor for this instance.
   */
  public void put(V value)
  {
    this.associatedMap.put(keyGenerator.generateNewKey(), value);
  }

  /**
   * Return the associated <code>Map</code> used by this instance.
   *
   * @return The associated <code>Map</code> type.
   */
  public Map<K, V> getAssociatedMap()
  {
    return this.associatedMap;
  }

  @Override
  public String toString()
  {
    final StringBuilder sb = new StringBuilder("AutoMap{");
    sb.append("keyGenerator=").append(keyGenerator);
    sb.append(", associatedMap=").append(associatedMap);
    sb.append('}');
    return sb.toString();
  }
}
